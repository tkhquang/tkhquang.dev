@import "constants";

/// Get the color value from $colors constant
///
/// @param {string} $key -
///   Key name of the color to search in $colors.
/// @return {color} -
///   Color value found in $colors based on the key.
@function get-color($key) {
  @return map-get($colors, $key);
}

/// Apply rules on current element based on 'data-theme' attribute of the body tag, default to dark theme.
///
/// @param {'dark'|'light'} $theme -
///   Content rules will apply to this theme.
@mixin on-theme($theme) {
  $self: &;
  @if $theme == dark {
    #{$self} {
      @content;
    }
  }
  @else if $theme == light {
    @at-root body[data-theme="light"] #{$self} {
      @content;
    }
  }
}

/// Generate media queries based on a specific screen size with mobile first approach.
///
/// @param {'XS' | 'SM' | 'MD' | 'LG' | 'XL'} $canvas -
///   Screen sizes, in sync with TailwindCSS
@mixin Responsive($canvas) {
  $XS: 480px; // Custom added
  $SM: 640px;
  $MD: 768px;
  $LG: 1024px;
  $XL: 1280px;

  @if $canvas == XS {
   @media only screen and (min-width: $XS) {
     @content;
   }
  }
  @else if $canvas == SM {
   @media only screen and (min-width: $SM) {
     @content;
   }
  }
  @else if $canvas == MD {
   @media only screen and (min-width: $MD) {
     @content;
   }
  }
  @else if $canvas == LG {
    @media only screen and (min-width: $LG) {
      @content;
    }
   }
  @else if $canvas == XL {
   @media only screen and (min-width: $XL) {
     @content;
   }
  }
}

@mixin typography {
  p, table {
    margin-top: 1em;
    margin-bottom: 1em;
  }

  table {
    background-color: var(--surface);
    color: (var--on-surface);
  }

  figure {
    position: relative;
    overflow: hidden;
    border-width: 1px;
    border-color: var(--surface);
    border-radius: 7px;
    background: linear-gradient(
      90deg,
      var(--background) 0%,
      var(--surface) 20%,
      var(--surface) 50%,
      var(--surface) 80%,
      var(--background) 100%
    ) var(--surface);
    color: (var--on-secondary);
    box-shadow: 0px 0px 2px 2px rgba(0, 0, 0, 0.25);

    img {
      width: 100%;
    }

    figcaption {
      text-align: center;
      font-weight: 600;
      font-style: italic;
      padding-top: 0.5em;
      padding-bottom: 0.5em;
    }
  }

  a {
    font-weight: bold;
    color: (var(--primary));
    position: relative;

    &[target="_blank"]::after {
      content: " ";
      background-image: url('~@/assets/resources/svg/external-link.svg');
      background-size: 1em;
      background-size: contain;
      margin-left: 3px;
      width: 1em;
      height: 1em;
      display: inline-block;
      vertical-align: text-top;
    }
    &:hover,
    &:active {
      text-decoration: underline;
      filter: brightness(85%);
    }
    &:visited {
      filter: brightness(85%);
    }
  }

  h1, h2, h3, h4, h5, h6 {
    line-height: 1.15em;
    position: relative;
    padding-bottom: 0.75em;

    a {
      transition: all 0.5s linear;
      visibility: hidden;
      opacity: 0;
      position: absolute;
      left: -2rem;
    }

    &:hover {
      a {
        visibility: visible;
        opacity: 1;
      }
    }

    &::after {
      content: "";
      position: absolute;
      display: block;
      bottom: 0;
      width: 100%;
      height: 1px;
      opacity: 0.25;
      background-color: var(--primary);
    }
  }

  h1 { 
    display: block;
    font-size: 2em;
    margin-top: 0.67em;
    margin-bottom: 0.67em;
    margin-left: 0;
    margin-right: 0;
    font-weight: bold;
  }

  h2 {
    display: block;
    font-size: 1.5em;
    margin-top: 0.83em;
    margin-bottom: 0.83em;
    margin-left: 0;
    margin-right: 0;
    font-weight: bold;
  }

  h3 { 
    display: block;
    font-size: 1.17em;
    margin-top: 1em;
    margin-bottom: 1em;
    margin-left: 0;
    margin-right: 0;
    font-weight: bold;
  }

  h4 { 
    display: block;
    margin-top: 1.33em;
    margin-bottom: 1.33em;
    margin-left: 0;
    margin-right: 0;
    font-weight: bold;
  }

  h5 { 
    display: block;
    font-size: .83em;
    margin-top: 1.67em;
    margin-bottom: 1.67em;
    margin-left: 0;
    margin-right: 0;
    font-weight: bold;
  }

  h6 { 
    display: block;
    font-size: .67em;
    margin-top: 2.33em;
    margin-bottom: 2.33em;
    margin-left: 0;
    margin-right: 0;
    font-weight: bold;
  }

  small {font-size: 0.889em;}

  strong {
    font-weight: 600;
  }

  blockquote {
    display: block;
    background-color: var(--surface);
    border-left: 4px solid var(--on-surface);
    margin: 1.5em 10px;
    padding: 1em 0.5em;
    quotes: "\201c" "\201d";

    & > p:first-of-type {
      display: inline;
      font-style: italic;
      font-size: 90%;
      font-weight: 500;
      background-color: rgba(0, 0, 0, 0.1);

      &::before {
        pointer-events: none;
        color: var(--on-surface);
        content: open-quote;
        font-size: 4em;
        font-weight: normal;
        line-height: 0.1em;
        margin-right: 0.15em;
        vertical-align: -0.4em;
      }
  
      &::after {
        pointer-events: none;
        color: var(--on-surface);
        content: close-quote;
        font-size: 4em;
        font-weight: normal;
        line-height: 0.1em;
        margin-left: 0.1em;
        vertical-align: -0.6em;
      }
    }

    & > p:last-of-type {
      margin: 0.5em 0.5em 0 0;
      text-align: right;
      font-size: 90%;
      opacity: 0.75;

      &::before {
        pointer-events: none;
        color: var(--on-surface);
        content: "\2014 \2009";
        margin-right: 0.1em;
      }
    }
  }

  cite {
    font-style: italic;
  }

  em {
    font-style: italic;
  }

  ul {
    list-style-type: disc;
    margin-left: 1.25em;
    margin-bottom: 1.25em;
    li {
      margin-bottom: .6em;
    }
  }

  ol {
    list-style-type: decimal;
    margin-left: 1.25em;
    margin-bottom: 1.25em;
    li {
      margin-bottom: .6em;
    }
  }
}

/// Apply custom scrollbar styles to the current element.
///
/// @param {length | string} $webkit-size -
///   The size of the scrollbars for webkit based browsers.
/// @param {color} $foreground-color -
///   The color of scrollbar thumb.
/// @param {color} $background-color -
///   The color of scrollbar track.
/// @param {auto | thin | none} $moz-size [null] -
///   The size of the scrollbars for firefox.
@mixin apply-scrollbar($webkit-size, $foreground-color, $background-color, $moz-size: null) {
  @if $moz-size == null {
    @if type-of($webkit-size) == number {
      @if $webkit-size <= 8px {
        $moz-size: thin
      }
    
      @else if $webkit-size == 0 {
        $moz-size: none
      }
  
      @else {
        $moz-size: auto
      }
    }
    @else {
      $moz-size: auto
    }
  }

  // webkit based browsers
  &::-webkit-scrollbar {
    width: $webkit-size;
    height: $webkit-size;
  }

  &::-webkit-scrollbar-thumb {
    background: $foreground-color;
  }

  &::-webkit-scrollbar-thumb:hover {
    background: mix($foreground-color, #000000, 80%);
  }

  &::-webkit-scrollbar-track {
    background: $background-color;
  }

  &::-webkit-scrollbar-corner {
    background-color: $background-color;
  }

  // For Internet Explorer
  scrollbar-face-color: $foreground-color;
  scrollbar-track-color: $background-color;

  // For Firefox
  scrollbar-color: $foreground-color $background-color;
  scrollbar-width: $moz-size;
}
